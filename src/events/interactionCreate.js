const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const db = require('../data/database');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction, client) {
    // Verifica se a intera√ß√£o √© um comando de barra (Slash Command)
    if (interaction.isChatInputCommand()) {
      const command = client.slashCommands.get(interaction.commandName);
      if (!command) return;

      try {
        // Executa o comando de barra
        await command.execute(interaction);
      } catch (error) {
        console.error(`[ERROR] Erro ao executar Slash Command: ${error.message}`);
        // Responde ao usu√°rio com um erro caso algo d√™ errado
        await interaction.reply({ content: '<:1000042883:1336044555354771638> Ocorreu um erro ao executar este comando.', ephemeral: true });
      }
    }

    // Verifica se a intera√ß√£o √© um clique em bot√£o
    if (interaction.isButton()) {
      // Verifica se o bot√£o √© de aceita√ß√£o dos Termos de Uso
      if (interaction.customId === 'accept_terms') {
        const command = client.commands.get('acceptTerms');
        if (command) {
          // Executa o comando de aceita√ß√£o dos Termos de Uso
          return await command.execute(interaction);
        }
        // Caso n√£o encontre o comando, responde com erro
        return interaction.reply({ content: 'Erro ao processar os Termos de Uso.', ephemeral: true });
      }

      // Verifica se a intera√ß√£o est√° relacionada a um sorteio
      const giveaway = db.prepare('SELECT * FROM giveaways WHERE message_id = ?').get(interaction.message.id);
      if (!giveaway) return;

      let participants = JSON.parse(giveaway.participants);

      // Verifica se o usu√°rio clicou para participar do sorteio
      if (interaction.customId === 'participar') {
        // Verifica se o usu√°rio j√° est√° participando
        if (participants.includes(interaction.user.id)) {
          return interaction.reply({ content: '<:1000042883:1336044555354771638> Voc√™ j√° est√° concorrendo neste sorteio!', ephemeral: true });
        }

        // Adiciona o usu√°rio √† lista de participantes
        participants.push(interaction.user.id);
        db.prepare('UPDATE giveaways SET participants = ? WHERE message_id = ?').run(JSON.stringify(participants), interaction.message.id);

        // Atualiza os bot√µes do sorteio
        const updatedRow = new ActionRowBuilder().addComponents(
          new ButtonBuilder().setCustomId('participar').setLabel('üéü Participar').setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId('ver_participantes')
            .setLabel(`üë• Participantes: ${participants.length}`)
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(true)
        );

        // Responde ao usu√°rio confirmando a participa√ß√£o e atualiza os bot√µes
        await interaction.update({ components: [updatedRow] });
        return interaction.followUp({ content: '<:1000042885:1336044571125354496> Sua entrada no sorteio foi registrada!', ephemeral: true });
      }

      // Verifica se o usu√°rio clicou para ver os participantes do sorteio
      if (interaction.customId === 'ver_participantes') {
        return interaction.reply({ content: `üë• Participantes: ${participants.length}`, ephemeral: true });
      }
    }
  },
};
